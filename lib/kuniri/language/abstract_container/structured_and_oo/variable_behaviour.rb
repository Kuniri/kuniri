#
# Copyright (C) 2015-2017 Rodrigo Siqueira  <siqueira@kuniri.org>
#
# This source code is licensed under the GNU lesser general public license,
# Version 3.  See the file COPYING for more details

module Languages

  # @abstract This class is an abstraction for handling any element whose the
  # behaviour is similar to a variable. As an example, we have global
  # variables and attributes that have some similarities.
  class VariableBehaviour

    # Usually variable and attributes have a similar behaviour inside any
    # languages. With this idea in mind, this method is focused to keep the
    # similarities between all of them and avoid code duplication.
    # @param pLine Line with a potential global variable or attribute
    def common_declaration(pLine)
      raise NotImplementedError
    end

    protected

      TMP_TOKEN_COMMA = "<comma>"
      TMP_TOKEN_EQUAL = "<equal>"
      TMP_HASH_SIMBOL = "<hash>"

      # Before detect string it is required to pre-process it to avoid any
      # mistake during the parse operations. Follows the required steps:
      #
      # * Replaces strings and methods parameters by a token to be used later
      # * Replace commas inside brackets and braces to avoid wrong replacement
      # * Replace equal by token
      # * Verify if line still valid after the steps above
      # * Create an Array of variables
      def pre_process(pLine)
        pLine, hash_of_strings = replace_strings_and_params(pLine)
        pLine = replace_commas_inside_brackets_and_braces(pLine)
        pLine = replace_equals(pLine)
        return nil, nil unless pLine # Case of ==, stop immediately
        pLine = break_string_line(pLine)

        return pLine, hash_of_strings
      end

      # Take all strings inside quotes and methods parameters and replace by
      # enumerated tokens. For example: x = "test one" ---after--> x = <str0>
      # For more information take a look at ruby/variable_behaviour_ruby.rb
      # @param pLine Return Line to be process
      # @return Return a new string with quotes and parameters replaced
      # @return Return an hash with token and value
      def replace_strings_and_params(pLine)
        raise NotImplementedError
      end

      # Replace commas inside hashes and arrays to avoid problems in other steps
      # @param pLine Line to be processed
      # @return String with tokens for comma
      def replace_commas_inside_brackets_and_braces(pLine)
        raise NotImplementedError
      end

      # Replace assignments with equal by token
      # @param pLine Line to be processed
      # @return String with tokens on equals
      def replace_equals(pLine)
        raise NotImplementedError
      end

      # Final step of pre_process method, at this point break the final string
      # into their different elements. Normally it is a 'comma'.
      # @param String to be processed
      # @return Array of variables
      def break_string_line(pLine)
        raise NotImplementedError
      end

      # Build a hash with variables and their values. It is required the hash
      # of values generated by pre_process
      # @param pVariablesList List of all variables generated by pre_process
      # @param pStringsValues Hash with token mapped to a string of value
      # @return Hash of variables with values
      def build_hash_of_variables_and_values(pVariablesList, pStringsValues)
        raise NotImplementedError
      end

      # Method with specific implementations to verify if some string can be a
      # variable or not.
      # @param pVariable String to be verified
      # @return true if is a valid variable or false otherwise.
      # TODO: Verify if is a keyword
      def is_variable?(pVariable)
        raise NotImplementedError
      end

      # Replace tokens related to strings and parameters inserted by pre_process
      # @param pValue String to be processed
      # @param pStrings Hash with values
      # @return String with correct values inside quotes and parameters
      def process_value(pValue, pStrings)
        raise NotImplementedError
      end

      # Replace final tokens from string
      def normalize_elements(pVariables)
        raise NotImplementedError
      end
  # Class
  end
# Language
end
