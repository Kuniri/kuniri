#!/usr/bin/env ruby

require_relative '../lib/kuniri'
require_relative '../lib/kuniri/core/kuniri'
require_relative '../lib/kuniri/parser/xml_output_format'

require 'logger'
require 'optparse'
require 'optparse/time'
require 'ostruct'

class OptparseKuniri
  Version = Kuniri::VERSION

  class ScriptOptions
    attr_accessor :verbose_level, :output, :optimization, :language, :source

    def initialize
      name = 'outputKuniri'
      self.verbose_level = Logger::WARN
      self.optimization = 0
      self.language = 'ruby'
      self.source = ARGV[0]
      self.output = Dir.exist?(source) ? "#{name}/" : "#{name}.xml"
    end

    def define_options(parser)
      parser.banner = 'Usage: kuniri INPUT_FILE|INPUT_DIRECTORY [OPTIONS]'
      parser.separator ''
      parser.separator 'Specific options:'

      # add additional options
      verbose_option(parser)
      very_verbose_option(parser)
      output_option(parser)
      optimization_option(parser)
      language_option(parser)

      parser.separator ''
      parser.separator 'Common options:'
      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      parser.on_tail('-h', '--help', 'Show this message') do
        puts parser
        exit
      end
      # Another typical switch to print the version.
      parser.on_tail('--version', 'Show version') do
        puts Version
        exit
      end
    end

    def verbose_option(parser)
      parser.on('-v', '--verbose', 'Run verbosely') do
        self.verbose_level = Logger::INFO
      end
    end

    def very_verbose_option(parser)
      parser.on('-V', '--very-verbose', 'Very verbose') do
        self.verbose_level = Logger::DEBUG
      end
    end

    def output_option(parser)
      parser.on('-o', '--output PATH', 'Export') do |path|
        self.output = path
      end
    end

    def optimization_option(parser)
      parser.on('-O', '--optimization 1,2,3', 'Optimize', Integer) do |o|
        self.optimization = o
      end
    end

    def language_option(parser)
      parser.on('-l', '--language LANG', 'Define language') do |o|
        self.optimization = o
      end
    end
  end # class ScriptOptions

  #
  # Return a structure describing the options.
  #
  def self.parse(args)
    # The options specified on the command line will be collected in
    # *options*.

    @options = ScriptOptions.new
    @args = OptionParser.new do |parser|
      @options.define_options(parser)
      begin
        parser.parse!(args)
      rescue OptionParser::MissingArgument, OptionParser::InvalidOption => error
        puts error.message
        puts "Try 'kuniri --help' for more information."
        exit
      end
    end
    @options
  end

  attr_reader :parser, :options

end # class OptparseKuniri

def main
  options = OptparseKuniri.parse(ARGV)

  Util::LoggerKuniri.update_log_level(options.verbose_level)

  kuniri = Kuniri::Kuniri.new
  kuniri.set_configuration(options.source, options.language, options.output,
                           options.optimization)
  kuniri.run_analysis

  parser = Parser::XMLOutputFormat.new(options.optimization)
  parser.set_path(options.output)
  parser.create_all_data(kuniri.get_parser)
end

main
