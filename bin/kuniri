#!/usr/bin/env ruby

require 'logger'
require 'kuniri'
require 'optparse'
require 'kuniri/core/kuniri'
require 'kuniri/parser/xml_output_format'

@options = {}
@options[:source] = ARGV[0]

optionParser = OptionParser.new do |buildOptions|
  buildOptions.banner = "Usage: kuniri [OPTIONS] [FILE|FOLDER] [OPTIONS]"
  buildOptions.separator  ""
  buildOptions.separator  "OPTIONS"
  buildOptions.separator  "     FILE: Target file"
  buildOptions.separator  "     FOLDER: Folder file"
  buildOptions.separator  ""
  buildOptions.separator  "Options"
  buildOptions.version = Kuniri::VERSION

  buildOptions.on("-v", "--verbose", "Run verbosely") do |verbose|
    @options[:verbose] = Logger::INFO
  end

  buildOptions.on("-V", "--very-verbose", "Very verbose") do |veryVerbose|
    @options[:verbose] = Logger::DEBUG
  end

  buildOptions.on("--version", "Show Kuniri version") do |version|
    puts buildOptions.version
    exit
  end

  buildOptions.on("-o", "--output [DEST]", "Export") do |dest|
    @options[:output] = dest
  end

  buildOptions.on("-h", "--help", "Help") do |dest|
    puts buildOptions
		exit
  end

  buildOptions.on("-O", "--optimization 1,2,3", "Optimize", Numeric) do
    |optimization|
      @options[:optimization] = optimization
  end

  buildOptions.on("-l", "--language [languageType]", "Define language") do
    |languageType|
    @options[:languageType] = languageType
  end

  buildOptions.on("-e", "--export [FILENAME]", "Export XML") do
    |configurationFile|

    puts "Exporting..."

    if(configurationFile)
      path = configurationFile
    else
      path = '.kuniri.yml'
    end

    kuniri = Kuniri::Kuniri.new
    kuniri.read_configuration_file(path)
    kuniri.run_analysis

    parser = Parser::XMLOutputFormat.new
    parser.create_all_data(kuniri.get_parser())
  end

end.parse!

def verifyVerboseMode
	Util::LoggerKuniri.update_log_level(@options[:verbose])
end

def startParser
  puts "Exporting ..."
  unless (@options[:output])
    @options[:output] = 'outputKuniri/'
  end

  verifyVerboseMode if @options[:verbose]

  kuniri = Kuniri::Kuniri.new
  kuniri.set_configuration(@options[:source], @options[:languageType],
                           @options[:output], @options[:optimization])
  kuniri.run_analysis

  parser = Parser::XMLOutputFormat.new(@options[:optimization])
  parser.set_path(@options[:output])
  parser.create_all_data(kuniri.get_parser())
end

if @options[:source] && @options[:output]
  startParser
end
